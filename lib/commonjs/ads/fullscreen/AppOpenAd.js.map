{"version":3,"sources":["AppOpenAd.ts"],"names":["defaultOptions","showOnColdStart","showOnAppForeground","loadOnDismissed","requestOptions","_appOpenRequest","AppOpenAd","FullScreenAd","constructor","requestId","unitId","options","checkInstance","sharedInstance","Error","createAd","_options","destroy","getAd","load","show","setRequestOptions","addEventListener","event","handler","removeAllListeners"],"mappings":";;;;;;;AAOA;;;;;;AAEA,MAAMA,cAAgC,GAAG;AACvCC,EAAAA,eAAe,EAAE,KADsB;AAEvCC,EAAAA,mBAAmB,EAAE,IAFkB;AAGvCC,EAAAA,eAAe,EAAE,IAHsB;AAIvCC,EAAAA,cAAc,EAAE;AAJuB,CAAzC;AAOA,IAAIC,eAAe,GAAG,CAAtB;;AAEe,MAAMC,SAAN,SAAwBC,qBAAxB,CAAqC;AAC1CC,EAAAA,WAAW,CACjBC,SADiB,EAEjBC,MAFiB,EAGjBC,OAHiB,EAIjB;AACA,UAAM,SAAN,EAAiBF,SAAjB,EAA4BC,MAA5B,EAAoCC,OAApC;AACD;;AAI2B,SAAbC,aAAa,GAAG;AAC7B,QAAI,CAAC,KAAKC,cAAV,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACiB,SAARC,QAAQ,CAACL,MAAD,EAAiBC,OAAjB,EAA6C;AAAA;;AAC1D,UAAMK,QAAQ,GAAG,EAAE,GAAGhB,cAAL;AAAqB,SAAGW;AAAxB,KAAjB;AAEA,iCAAKE,cAAL,8EAAqBI,OAArB;AAEA,UAAMR,SAAS,GAAGJ,eAAe,EAAjC;AACA,SAAKQ,cAAL,GAAsB,IAAIP,SAAJ,CAAcG,SAAd,EAAyBC,MAAzB,EAAiCM,QAAjC,CAAtB;AACA,WAAO,KAAKH,cAAZ;AACD;AAED;AACF;AACA;;;AACc,SAALK,KAAK,GAAG;AACb,WAAO,KAAKL,cAAZ;AACD;AAED;AACF;AACA;AACA;;;AACa,SAAJM,IAAI,CAACf,cAAD,EAAkC;AAC3C,SAAKQ,aAAL;AACA,WAAO,KAAKC,cAAL,CAAqBM,IAArB,CAA0Bf,cAA1B,CAAP;AACD;AAED;AACF;AACA;;;AACa,SAAJgB,IAAI,GAAG;AACZ,SAAKR,aAAL;AACA,WAAO,KAAKC,cAAL,CAAqBO,IAArB,EAAP;AACD;AAED;AACF;AACA;;;AACgB,SAAPH,OAAO,GAAG;AACf,SAAKL,aAAL;AACA,SAAKC,cAAL,CAAqBI,OAArB;AACA,SAAKJ,cAAL,GAAsB,IAAtB;AACD;AAED;AACF;AACA;AACA;;;AAC0B,SAAjBQ,iBAAiB,CAACjB,cAAD,EAAkC;AACxD,SAAKQ,aAAL;AACA,WAAO,KAAKC,cAAL,CAAqBQ,iBAArB,CAAuCjB,cAAvC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACyB,SAAhBkB,gBAAgB,CACrBC,KADqB,EAErBC,OAFqB,EAGrB;AACA,SAAKZ,aAAL;AACA,WAAO,KAAKC,cAAL,CAAqBS,gBAArB,CAAsCC,KAAtC,EAA6CC,OAA7C,CAAP;AACD;AAED;AACF;AACA;;;AAC2B,SAAlBC,kBAAkB,GAAG;AAC1B,SAAKb,aAAL;AACA,WAAO,KAAKC,cAAL,CAAqBY,kBAArB,EAAP;AACD;;AA7FiD;;;;gBAA/BnB,S,oBAS+B,I","sourcesContent":["import {\n  AppOpenAdOptions,\n  FullScreenAdEvent,\n  FullScreenAdHandlerType,\n  RequestOptions,\n} from '../../types';\n\nimport FullScreenAd from './FullScreenAd';\n\nconst defaultOptions: AppOpenAdOptions = {\n  showOnColdStart: false,\n  showOnAppForeground: true,\n  loadOnDismissed: true,\n  requestOptions: {},\n};\n\nlet _appOpenRequest = 0;\n\nexport default class AppOpenAd extends FullScreenAd {\n  private constructor(\n    requestId: number,\n    unitId: string,\n    options: AppOpenAdOptions\n  ) {\n    super('AppOpen', requestId, unitId, options);\n  }\n\n  private static sharedInstance: AppOpenAd | null = null;\n\n  private static checkInstance() {\n    if (!this.sharedInstance) {\n      throw new Error('AppOpenAd is not created.');\n    }\n  }\n\n  /**\n   * Creates a AppOpenAd instance. Ad is loaded automatically after created and after dismissed.\n   * @param unitId The Ad Unit ID for the App Open Ad. You can find this on your Google AdMob dashboard.\n   * @param options Optional AppOpenAdOptions object.\n   */\n  static createAd(unitId: string, options?: AppOpenAdOptions) {\n    const _options = { ...defaultOptions, ...options };\n\n    this.sharedInstance?.destroy();\n\n    const requestId = _appOpenRequest++;\n    this.sharedInstance = new AppOpenAd(requestId, unitId, _options);\n    return this.sharedInstance;\n  }\n\n  /**\n   * Returns loaded App Open Ad instance.\n   */\n  static getAd() {\n    return this.sharedInstance;\n  }\n\n  /**\n   * Loads a new App Open ad.\n   * @param requestOptions Optional RequestOptions used to load the ad.\n   */\n  static load(requestOptions?: RequestOptions) {\n    this.checkInstance();\n    return this.sharedInstance!.load(requestOptions);\n  }\n\n  /**\n   * Shows loaded App Open Ad.\n   */\n  static show() {\n    this.checkInstance();\n    return this.sharedInstance!.show();\n  }\n\n  /**\n   * Destroys the App Open Ad.\n   */\n  static destroy() {\n    this.checkInstance();\n    this.sharedInstance!.destroy();\n    this.sharedInstance = null;\n  }\n\n  /**\n   * Sets RequestOptions for this Ad instance.\n   * @param requestOptions RequestOptions used to load the ad.\n   */\n  static setRequestOptions(requestOptions?: RequestOptions) {\n    this.checkInstance();\n    return this.sharedInstance!.setRequestOptions(requestOptions);\n  }\n\n  /**\n   * Adds an event handler for an ad event.\n   * @param event Event name\n   * @param handler Event handler\n   */\n  static addEventListener(\n    event: FullScreenAdEvent,\n    handler: FullScreenAdHandlerType\n  ) {\n    this.checkInstance();\n    return this.sharedInstance!.addEventListener(event, handler);\n  }\n\n  /**\n   * Removes all registered event handlers for this ad.\n   */\n  static removeAllListeners() {\n    this.checkInstance();\n    return this.sharedInstance!.removeAllListeners();\n  }\n}\n"]}