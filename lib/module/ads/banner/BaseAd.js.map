{"version":3,"sources":["BaseAd.tsx"],"names":["Component","createRef","findNodeHandle","requireNativeComponent","UIManager","RNAdMobBannerView","BaseAd","style","width","height","loadAd","dispatchViewManagerCommand","bannerRef","undefined","handleSizeChange","event","nativeEvent","setState","props","onSizeChange","handleOnAdLoaded","onAdLoaded","handleOnAdFailedToLoad","onAdFailedToLoad","handleOnAdOpened","onAdOpened","handleOnAdClosed","onAdClosed"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,OAArC;AACA,SACEC,cADF,EAEEC,sBAFF,EAIEC,SAJF,QAMO,cANP;AAcA,OAAO,MAAMC,iBAAiB,GAC5BF,sBAAsB,CAAmB,mBAAnB,CADjB;;AAGP,MAAeG,MAAf,SAEUN,SAFV,CAEuB;AAAA;AAAA;;AAAA,mCACE;AACrBO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB;AADc,KADF;;AAAA,oDAITR,SAAS,EAJA;AAAA;;AAMrBS,EAAAA,MAAM,GAAG;AACPN,IAAAA,SAAS,CAACO,0BAAV,EACE;AACAT,IAAAA,cAAc,CAAC,KAAKU,SAAN,CAFhB,EAGE,WAHF,EAIEC,SAJF;AAMD;;AAESC,EAAAA,gBAAgB,CAACC,KAAD,EAAa;AACrC,UAAM;AAAEN,MAAAA,MAAF;AAAUD,MAAAA;AAAV,QAAoBO,KAAK,CAACC,WAAhC;AACA,SAAKC,QAAL,CAAc;AAAEV,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAT,KAAd;;AACA,QAAI,KAAKS,KAAL,CAAWC,YAAf,EAA6B;AAC3B,WAAKD,KAAL,CAAWC,YAAX,CAAwB;AAAEX,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAxB;AACD;AACF;;AAESW,EAAAA,gBAAgB,GAAG;AAC3B,QAAI,KAAKF,KAAL,CAAWG,UAAf,EAA2B;AACzB,WAAKH,KAAL,CAAWG,UAAX;AACD;AACF;;AAESC,EAAAA,sBAAsB,CAACP,KAAD,EAAa;AAC3C,QAAI,KAAKG,KAAL,CAAWK,gBAAf,EAAiC;AAC/B,WAAKL,KAAL,CAAWK,gBAAX,CAA4BR,KAAK,CAACC,WAAlC;AACD;AACF;;AAESQ,EAAAA,gBAAgB,GAAG;AAC3B,QAAI,KAAKN,KAAL,CAAWO,UAAf,EAA2B;AACzB,WAAKP,KAAL,CAAWO,UAAX;AACD;AACF;;AAESC,EAAAA,gBAAgB,GAAG;AAC3B,QAAI,KAAKR,KAAL,CAAWS,UAAf,EAA2B;AACzB,WAAKT,KAAL,CAAWS,UAAX;AACD;AACF;;AA7CoB;;AAgDvB,eAAerB,MAAf","sourcesContent":["import { Component, createRef } from 'react';\nimport {\n  findNodeHandle,\n  requireNativeComponent,\n  StyleProp,\n  UIManager,\n  ViewStyle,\n} from 'react-native';\n\nimport { BannerAdProps, GAMBannerAdProps } from '../../types';\n\ninterface BannerAdState {\n  style: StyleProp<ViewStyle>;\n}\n\nexport const RNAdMobBannerView =\n  requireNativeComponent<GAMBannerAdProps>('RNAdMobBannerView');\n\nabstract class BaseAd<\n  T extends BannerAdProps | GAMBannerAdProps\n> extends Component<T> {\n  state: BannerAdState = {\n    style: { width: 0, height: 0 },\n  };\n  bannerRef = createRef();\n\n  loadAd() {\n    UIManager.dispatchViewManagerCommand(\n      //@ts-expect-error\n      findNodeHandle(this.bannerRef),\n      'requestAd',\n      undefined\n    );\n  }\n\n  protected handleSizeChange(event: any) {\n    const { height, width } = event.nativeEvent;\n    this.setState({ style: { width, height } });\n    if (this.props.onSizeChange) {\n      this.props.onSizeChange({ width, height });\n    }\n  }\n\n  protected handleOnAdLoaded() {\n    if (this.props.onAdLoaded) {\n      this.props.onAdLoaded();\n    }\n  }\n\n  protected handleOnAdFailedToLoad(event: any) {\n    if (this.props.onAdFailedToLoad) {\n      this.props.onAdFailedToLoad(event.nativeEvent);\n    }\n  }\n\n  protected handleOnAdOpened() {\n    if (this.props.onAdOpened) {\n      this.props.onAdOpened();\n    }\n  }\n\n  protected handleOnAdClosed() {\n    if (this.props.onAdClosed) {\n      this.props.onAdClosed();\n    }\n  }\n}\n\nexport default BaseAd;\n"]}