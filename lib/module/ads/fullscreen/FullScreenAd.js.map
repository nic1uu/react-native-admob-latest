{"version":3,"sources":["FullScreenAd.ts"],"names":["NativeEventEmitter","NativeModules","AdError","RNAdMobEvent","eventEmitter","defaultOptions","loadOnMounted","showOnLoaded","loadOnDismissed","requestOptions","FullScreenAd","constructor","type","requestId","unitId","options","listeners","nativeModule","load","catch","setRequestOptions","addEventListener","event","handler","eventHandler","e","data","message","code","listener","addListener","push","remove","index","indexOf","splice","removeAllListeners","forEach","requestAd","error","Promise","reject","userInfo","show","presentAd","destroy","destroyAd"],"mappings":"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","sourcesContent":["import {\n  EmitterSubscription,\n  NativeEventEmitter,\n  NativeModules,\n} from 'react-native';\n\nimport AdError from '../../AdError';\nimport {\n  AdType,\n  AppOpenAdOptions,\n  FullScreenAdEvent,\n  FullScreenAdHandlerType,\n  FullScreenAdOptions,\n  RequestOptions,\n  RewardedAdEvent,\n  RewardedAdHandlerType,\n} from '../../types';\n\nconst RNAdMobEvent = NativeModules.RNAdMobEvent;\n\nconst eventEmitter = new NativeEventEmitter(RNAdMobEvent);\n\ntype Event = {\n  type: AdType;\n  requestId: number;\n  data?: any;\n};\n\ninterface FullScreenAdInterface {\n  requestAd: (\n    requestId: number,\n    unitId: string,\n    options: FullScreenAdOptions | AppOpenAdOptions\n  ) => Promise<void>;\n  presentAd: (requestId: number) => Promise<void>;\n  destroyAd: (requestId: number) => void;\n}\n\nconst defaultOptions: FullScreenAdOptions = {\n  loadOnMounted: true,\n  showOnLoaded: false,\n  loadOnDismissed: false,\n  requestOptions: {},\n};\n\nexport default class FullScreenAd<\n  E extends RewardedAdEvent = FullScreenAdEvent,\n  H extends RewardedAdHandlerType = FullScreenAdHandlerType\n> {\n  readonly type: AdType;\n  readonly requestId: number;\n  readonly unitId: string;\n  readonly options: FullScreenAdOptions | AppOpenAdOptions;\n  private listeners: EmitterSubscription[];\n  private nativeModule: FullScreenAdInterface;\n\n  protected constructor(\n    type: AdType,\n    requestId: number,\n    unitId: string,\n    options?: FullScreenAdOptions | AppOpenAdOptions\n  ) {\n    this.type = type;\n    this.requestId = requestId;\n    this.unitId = unitId;\n    this.listeners = [];\n    this.options =\n      type === 'AppOpen' ? options! : { ...defaultOptions, ...options };\n    this.nativeModule = NativeModules[`RNAdMob${type}Ad`];\n    if (\n      type === 'AppOpen' ||\n      (this.options as FullScreenAdOptions).loadOnMounted\n    ) {\n      this.load().catch(() => {});\n    }\n  }\n\n  /**\n   * Sets RequestOptions for this Ad instance.\n   * @param requestOptions RequestOptions used to load the ad.\n   */\n  setRequestOptions(requestOptions: RequestOptions = {}) {\n    this.options.requestOptions = requestOptions;\n  }\n\n  /**\n   * Adds an event handler for an ad event.\n   * @param event Event name\n   * @param handler Event handler\n   */\n  addEventListener(event: E, handler: H) {\n    const eventHandler = (e: Event) => {\n      if (e.type === this.type && e.requestId === this.requestId) {\n        if (event === 'adFailedToLoad' || event === 'adFailedToPresent') {\n          // @ts-ignore\n          handler(new AdError(e.data.message, e.data.code));\n        } else {\n          handler(e.data);\n        }\n      }\n    };\n    const listener = eventEmitter.addListener(event, eventHandler);\n    this.listeners.push(listener);\n    return {\n      remove: () => {\n        listener.remove();\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n          this.listeners.splice(index, 1);\n        }\n      },\n    };\n  }\n\n  /**\n   * Removes all registered event handlers for this ad.\n   */\n  removeAllListeners() {\n    this.listeners.forEach((listener) => listener.remove());\n    this.listeners = [];\n  }\n\n  /**\n   * Loads a new Ad.\n   * @param requestOptions Optional RequestOptions used to load the ad.\n   */\n  async load(requestOptions: RequestOptions = {}) {\n    const options = {\n      ...this.options,\n      ...({\n        requestOptions,\n      } as FullScreenAdOptions | AppOpenAdOptions),\n    };\n    try {\n      return this.nativeModule.requestAd(this.requestId, this.unitId, options);\n    } catch (error: any) {\n      if (error.code === 'adFailedToLoad') {\n        return Promise.reject(\n          new AdError(error.userInfo.message, error.userInfo.code)\n        );\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  /**\n   * Shows loaded Ad.\n   */\n  async show() {\n    try {\n      return this.nativeModule.presentAd(this.requestId);\n    } catch (error: any) {\n      if (error.code === 'adFailedToPresent') {\n        return Promise.reject(\n          new AdError(error.userInfo.message, error.userInfo.code)\n        );\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  /**\n   * Destroys the Ad.\n   */\n  destroy() {\n    this.removeAllListeners();\n    this.nativeModule.destroyAd(this.requestId);\n  }\n}\n"]}